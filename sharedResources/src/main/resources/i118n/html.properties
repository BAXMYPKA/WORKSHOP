html.h1.loginPage=Login page for Workshop employees
html.submit.text.login=Login
html.title.loginPage=Internal site login page
html.upNav.upperMenu.aboutMe=About me
html.upNav.upperMenu.designComplaint=To complain of design and make-up
html.upNav.upperMenu.projectInDetail=Project in detail
html.upNav.upperMenu.projectInDetail.submenu.authorizationSecurity=Authorization
html.upNav.upperMenu.projectInDetail.submenu.howItWorks=How it should work
html.upNav.upperMenu.projectInDetail.submenu.authenticationSecurity=Authentication
html.upNav.upperMenu.projectInDetail.title=Project details in a nutshell
html.upNav.upperMenu.projectPurposes=Project purposes
html.upNav.upperMenu.projectTechnogies=Used technologies
html.upNav.upperMenu.underConstruction=What is under construction
html.span.workshopMotto=Keep it simple.
html.div.workshopName=WORKSHOP
html.upNav.upperMenu.projectInDetail.submenu.authenticationSecurity.title=How it checks usernames and passwords
html.upNav.upperMenu.projectInDetail.submenu.authorizationSecurity.title=How it grants access based on Granted Authorities
html.article.index-demo=<p>You are welcome to our imaginery international company Workshop main page!</p>\
<p>We, theoretically, provide any kind of services. For now we are offering the mending, maintenance and any other services for your bicycle.\
<p>If you personally visit our office then our manager place an Order and give its ID to you. And then online through our web site you can track the processing stages of the Order.</p>\
<p>After inline registration you can place Orders by yourself by choosing the desired services from the given ones to bring your bicycle later to us with the online Order ID.</p>\
\
<p>The application supports two languages - Russian and English (as we represent the international company!).</p>\
\
<p>The whole project is divided by two domains - External for external Users and Internal for Employees.\
<br>\
The Internal domain for now only has the working backend, but External domain is almost fully working and gradually evolves.\
</p>\
\
<p>After start the application automatically starts the server with the database in memory. This database is filled in with test data (Users, Employees, Orders etc). At the end when the server stops all that data will be erased.</p>
html.title.indexPage=WORKSHOP MAIN PAGE
html.h1.index-demo=Workshop main demo-page
html.upNav.upperMenu.projectTechnogies.springBoot=Spring Boot
html.upNav.upperMenu.projectTechnogies.springMvc=Spring MVC
html.upNav.upperMenu.projectTechnogies.springSecurity=Spring Security
html.upNav.upperMenu.projectTechnogies.springHateoas=Spring HATEOAS (REST)
html.upNav.upperMenu.projectTechnogies.jpa=JPA (Hibernate)
html.article.purposesPage=<p>Once I imagined how any workshop would work. For our example let it be the bicycle workshop from small to medium size which would accept clients orders for special kind of works accordint to its price. Those separate works are being combined to an Order, the Order's number is sent to the Client by email or phone messaging service. And furhtermore this Order's processing could be tracked online.\
</p>\
	<p>So not to create a big monolith the application is built as a few separate Maven-modules which responsible for their part of the application.\
	<br>\
	And the inner server part of it interacts with the web-interface via REST.</p>\
	<p>As a result, all of this has the purpose to do it yourserf.</p>
html.title.aboutPage=About me
html.title.howItWorksPage=How it works
html.h1.howItWorksPage=How it works in a nutshell
html.article.howItWorksPage=<p><i>The management of the "Internal" part of the Application through the web-interface is not implemented yet, as that part has to be operated via JavaScript (React) which has to show all the possibilites. But the server itself is absolutely capable of accepting and properly interacting with REST-requests for all the advertised kinds of Entities.</i></p>\
\
<h4>Assume we have the Bicycle Workshop with mending and maintenance services</h4>\
\
<ol>\
<li>Classifiers:</li>\
<p>From the list of Classifiers with the fixed prices we choose the set of services.\
<br>\
For instance, the rear wheel spokes stretch needs to be examined, also the wheel demands to change its quick-release and some repainting. The spokes examination and quick-release exchanging are presented in the public price, but the repainting a scratch we can offer for free as a gift - thus for it we create a custom Classifier with a short description and zero price.\
</p>\
<li>Tasks:</li>\
 <p>The following Task is accumulating all the included Classifiers prices and declares the desired deadline for them. After creating a Task we can appoint a responsible Employee for it or any of Employees will be able to appoint the Task on themselves.\
</p>\
<li>Orders:</li>\
<p>The resulting Orders will accumulate all the Tasks, Classifiers, all their prices, its creation date, its deadline, Users credentials etc. With the finishing of the last Task the Order informs the User about it by email or phone messaging service.\
 </p>\
<li>Users:</li>\
<p>For the future interact with Users we have to fill in either their emails of phones.</p>\
<p>After the responsible Employee finishes the last Task from the Order or the Order's field "finished" is set the client is being informed about it via email or phone messaging.</p>\
<br>\
While the Order is under the process Users can track it on the web-interface by the given ID.</p>\
<p><i>Also the application contains a part of inner (a bit simplified) logic, like Departments, Positions, permissions for HR staff etc.</i></p>\
</ol>
html.h1.authenticationPage=Authentication flow
html.title.authenticationPage=Authentication
html.article.authenticationPage=<p>Every user request passes through security filters.</p>\
<p>The free access is granted for almost all the pages of external site (except profile and online Order building pages) and the internal site login page.</p>\
<h3>FOR REGISTERED USERS</h3>\
<p>After User's successful login the application issues a <a href="https://jwt.io/">JWT token</a> and sends it in a response as the cookie "workshopUserAuthentication" with that JWT-token which will be evaluated in every further reques.</p>\
<h3>REGISTRATION PROCESS</h3>\
<p>The user data are evaluated beforehand on page (to check if the password strength correct, if the server doesn't have the same registered email etc), and then is being validated also on the server.\
<br>\
If all the data are correct the special disposable key-link will be sent to the registration email to confirm it. And only after the confirmation the given account will be permanently saved. <i>In the demo-mode the key-link is just displayed on page to click on.</i>\
</p>
html.title.authorizationPage=Authorization
html.h1.authorizationPage=Authorization process flow
html.article.authorizationPage=<ul>\
    <li>\
    Every application Entity has its own type (<b>WorkshopEntityType</b>) which just corresponds its name: <b>Order</b>, <b>Task</b>, <b>User</b> etc.\
    </li>\
    <li>\
    <p>The permissions (<b>AuthorityPermissions</b>) for accessing those Entities are based on HTTP-protocols: <b>GET</b> (Read), <b>PUT</b> (Write), <b>POST</b> (Create), <b>DELETE</b> (Delete).</p>\
    <p>Every created permission includes the access type and Entities set for this specific access type. E.g., AuthorityPermission "PUT (Order, Classifier)" allows modifiyng Orders and Classifiers entities.</p>\
    </li>\
    <li>\
    <p>Every permissions set are grouped into separate Permissions (<b>InternalAuthorities</b> for Employees and <b>ExternalAuthorities</b> for external Users).</p>\
    <p>For instanse, <b>InternalAuthority</b> "<b>HR_WRITE</b>" will include the previously created <b>"PUT (Order, Classifier)"</b> and <b>"GET (Order, Classifier, User, Task)"</b> permissions which will allow the owner of that <b>InternalAuthority</b> modifiyng Orders and Classifiers, and also reading the particular Orders and Users.</p>\
    </li>\
    <li>\
    <p>Eventually <b>InternalAuthorities</b> is spreaded among employees (<b>Position</b>)s and the <b>Employee</b>s have the abilities to save, modify and read the application Entities according to those <b>InternalAuthorities</b>.</p>\
    <p><b>ExternalAuthorities</b> in their turn are spreaded by similar sets among external Users.</p>\
    </li>\
</ul>
html.article.underConstructionPage=<ul>\
        <li>\
        As the project was built as the REST-service hence the main internal part of it has to be implemented as the sigle page application with the React which receives JSON as the HATEOAS with the Entities inside and a set of links for those Entities manupulations and manupulations with included Entities. All those things demand a separate development work with the JavaScript.\
        </li>\
        <li>Orders can be received from the clients by managers. After that the Order ID and all the following tracking information will be sent to the clients by email or phone messaging service (this service isn't implemented yet and has to be considered as the separate task).\
        </li>\
	</ul>
html.h1.underConstructionPage=What is under construction
html.title.underConstructionPage=Under construction
html.title.tecnologiesPage=Technologies used
html.h1.technologiesPage=Technologies used in the project
html.article.technologies-demo=<ul>\
	        <li id="springBoot">\
	        <p><b>Spring Boot</b></p>\
	        It is responsible for significally simplified startup when the whole technologies zoo is loaded automatically. We just select a desired starter and it will include all the necessary dependencies.\
			<br>\
			Plus it has the built in Tomcat which starts simultaneously.\
	        </li>\
	        <li id="springMvc">\
	        <p><b>Spring MVC</b></p>\
			The application front end at the moment works as a simple web-site with simple MVC-controllers on back.\
	        </li>\
			<li id="thymeleaf">\
				<p><b>Thymeleaf / HTML/CSS</b></p>\
					 <ul>\
	        		 <li>Thymeleaf</li>\
					 The excellent html templates-maker which is mush better than the outdated JSP.\
	        		<li>HTML/CSS</li>\
					Here's any post processors, pixel-hunting, advanced design and other right things for those who do make up.\
	        	</ul>\
			</li>\
	        <li id="springSecurity">\
	        <p><b>Spring Security / JWT</b></p>\
	        	<ul>\
	        		<li>\
	        		<p>Spring Security</p>\
					The access to the application non-publuc part is restricted by a cascade of filters built-in the framework.\
					<br>\
					For the REST-part of the application it is in charge for evaluating of every user request, granding variable kind of access to access to any kind of internals. For the MVC-part it is in charge for tracking sessions, cookies, signing out and verification of security keys etc.\
					<br>\
					So the access to internal methods and possibilities is based on GrantedAuthorities.\
					<br>\
					The "Authorization" section contains the more detailed description.\
	        		</li>\
	        		<li>\
	        		<p>JWT</p>\
	        		JSON Web Token is the tecnology for signing out the self-signed security keys for users authentication.\
	        		<br>\
					The section "Authentications" contains the more detailed description.\
	        		</li>\
	        	</ul>\
	         </li>\
	         <li id="springHateoas">\
	         <p><b>Spring HATEOAS (REST)</b></p>\
			 The inner domain entities invocation is based on the REST-technology with the help of HTTP-protocols, such as "get"-reading, "post"-creating, "put"-modifying, "delete"-deletion.\
	         <p>\
			 The implementation of Hypermadia As The Engine Of The State technology for the every request returns both a set of Links for manipulation with the requested Entity (e.g. also contains the link for deleting itself) and a set of Links for inner (included) Entities. The visibility of all the Entities for manupulation depends on granted access for the current user.\
	         </p>\
	         </li>\
	         <li>\
	         <p><b>JPA (Hibernate)</b></p>\
			 Hibernate is the default object-relation mapping technology for the embedded SQL tables.\
	         <br>\
			 With the help of its native abilities the second-level caching has been implemented. For the rest implementations the standard JPA protocol has been used.\
	         <p>The CriteriaApi language is messed with JPQL only for the education purposes.</p>\
	         <p><i>Frankly speaking, the sources still contain a lot of quite cumbersome entities invocations for their modifying, but it is suffice for such a small application. But for the future optimisation all of these have to be exchanged for direct SQL-tables calls via JPQL.</i>\
	         </p>\
	         </li>\
	         <li id="sql">\
	         <p><b>SQL (H2 database)</b></p>\
			 For the SQL databse tier the H2 has been used because it works as a Java-application, it perfectly compatible with a few wide spreaded SQL-dialects and can work as embedded database which starts with the main application, writes everything in memory and shuts down with the application at last.\
	         </li>\
	         <li id="hibernateValidation">\
	         <p><b>Hibernate Validation, Jackson JSON, Lombok, Ehcache</b></p>\
			 A number of additional libraries for more comfortable work and additional possibilities.\
	         </li>\
	         <li id="test">\
	         <p><b>Testing: JUnit \u0438 Mockito</b></p>\
			 Unit-testing and integrational testing. The last one was used more frequently as in a small application it is more convinient to test the functionality chain as the whole than buid up a lot of mocks.\
	         </li>\
			 	<li>\
				<p><b>JavaScript</b></p>\
				A few handmade script bicycles on the pages written in ES6 standard. AJAX-calls, user input validation, style changind and many more for adding a bit of interaction. No libraries and no frameworks were used with the aim to work with the language as it.\
	         </li>\
	    </ul>
html.upNav.upperMenu.projectTechnogies.sqlH2=SQL (H2 database)
html.article.designComplaint=<p>I am not good at drawing. Hence the design you are looking at is not so sofisticated\
	<br>\
	So make-up, styling, pixel-hunting etc are boring enough and not so interesting.\
	 <br>\
	 At the moment the project contains the common HTML + separated CSS styles for the every page. And all of those are based on a single hand-made template.\
	 <br>\
	 <p>Your complaint is accepted )))</P\
	 </p>
html.a.text.close=Close
html.upNav.upperMenu.projectTechnogies.etc=Hibernate Validation, Jackson JSON, Lombok ...
html.upNav.upperMenu.projectTechnogies.test=JUnit / Mockito
html.a.text.shutdown=X
html.button.title.shutdown=Close the Application
email.simpleMessage.subject.orderFinished(1)=Your Order\u2116 {0} is ready
email.simpleMessage.text.orderFinished(2)=We are happy to inform you that your Order\u2116 {0} is ready and you can get it at any time! \n {1}
html.a.href.contacts.gitHub=https://github.com/BAXMYPKA
html.a.text.gitHubPfofile=GItHub profile:
html.h4.contacts=Contacts:
html.article.aboutMe=This is all about me.
html.h1.aboutMe=About me
html.upNav.upperMenu.projectTechnogies.thymeleafHtmlCss=Thymeleaf / HTML/CSS
html.section.login.main=<p>This is the login gate to the internal part for the Employees only.</p>\
	<p>The login is the email. All the password are simplified to "12345". You can see the Employees preset on the right.</p>\
	<p>Every Employee has its own position and the every Position has its own granted access.</p>\
	<p>The only Employee with the full access is the "admin@workshop.pro" with the standard password "12345".</p>\
	<p>The application supports two languages - Russian and English (by default). The pages language is estimated automatically from your browser's "Accept-Language" header and after being changed the new language will be written in a special cookie.</p>
html.h1.internal.login=Internal login for Employees (Not functional yet)
html.thead.internal.login.predefinedEmployees=Predefined Employees list
properties.fullName=Full name
properties.email=Email
properties.position=Position
properties.department=Department
properties.language=Language
html.a.text.index-demo=Demo main page
html.a.title.index-demo=The main demo-page with project's details
html.a.text.index=Main page
html.a.title.index=Workshop public main page for the Users
html.a.text.internalPage=Internal page
html.a.title.internalPage=Workshop internal page for employees
html.h1.index=Workshop Bicycles main page
html.article.index=<p>Our imaginery Bicycle Workshop at your service.</p>\
	<p>\
		You can place an Order by two ways:\
	<ol>\
		<li>\
			By visiting our office with your bike or its parts that need to be maintaned.\
		</li>\
		<li>\
			And with online beforehand registration you can choose the desired set of services, review their prices and place an online Order. Further you will have to say the number of that Order when giving us your bike or its parts.\
		</li>\
		<p>\
			The site login menu contains the preset (and even preentered into the input fields) of Users. After the login with any of them the online Order building menu becomes available.\
		</p>\
		<p>\
			The registration of new Users is fully functional. Its abilities is described on the registration page.\
		</p>\
	</ol>\
</p>
html.a.index.loginRegistration=Login / Registration
html.article.login=<p>\
The login is the email.\
<br>\
After logging in you can observe your profile, your Orders and place an online Order.\
<br><br>\
There is the list of all the preset Users below, each has the simple "12345" password.\
<br>\
It is available to enter as any of them and look through their data, Orders etc.\
<br><br>\
The registration process is fully described on Registration page after clicking its button.\
<br><br>\
<i>\
Input fields are interactive. While input it is examined if such a User presented in the DataBase, password input is examined for being consisted of at least 5 letters.\
</i>\
</p>
properties.enabled=Enabled
html.thead.external.login.predefinedUsers=The list of predefined Users
html.a.text.services=Services list
html.a.title.services=Services list
html.h1.services=Our services list
html.submit.text.registrationSuggest=You have no profile? Register!
html.button.title.registrationProcessDescription=The screen with detailed regisration process description.
html.a.text.howToGetToUs=How to get to us
html.a.text.contacts=Contacts
html.a.text.address=Address
html.a.text.ourWorkshop=Our workshop
html.a.text.workshopStuff=Our staff photo gallery
html.div.workshopBicyclesName=Workshop bicycles
html.input.login.loginUsername=sebastian-pidorin@mail.pro
html.input.password.loginPassword=12345
html.upNav.upperMenu.projectTechnogies.javaScript=JavaScript
html.a.text.logout=Logout
html.a.title.workshop=Our Workshop
html.h1.workshop=Our Bicycles Workshop
html.a.title.workshopStuff=Our Bicycles Workshop Stuff
html.a.text.buildOrder=Build online Order
html.a.title.buildOrder=To build your own online Order
html.a.title.profile=User profile
properties.created=Creation date
html.h1.profile=User profile
properties.firstName=Name
properties.lastName=Surname
properties.birthday=Date of birth
properties.phone=Phone
html.thead.profile.tableName=Profile details
html.submit.text.saveChanges=Save changes
html.button.title.deletePhone=Delete phone
properties.phoneName=Phone name
properties.phoneNumber=Phone number
html.button.title.addPhone=Add phone
properties.phoneNotice=<br><i>Add a new Phone by the green plus to the right</i>
html.h1.orders=Your Orders
html.a.title.userOrders=Your Orders
html.thead.profile.orders.ordersList=Your Orders list
properties.id=ID
properties.finished=Finished
properties.description=Description
properties.overallPrice=Overall price
html.a.title.userOrder=Order page
html.thead.profile.orderDetails=Order details
properties.messageToUser=Message to User
properties.tasks=Included Tasks
properties.unroll=Unroll
html.thead.profile.tasks=Tasks
properties.price=Price
properties.name=Name
properties.deadline=Deadline
properties.appointedTo=Accountable person
html.h1.buildOrder=Build your own online Order
html.a.title.buildOrderOnline=Build online Order
properties.photo=Photo
properties.savePhoto=Save photo
properties.deletePhoto=Delete photo
html.button.title.deletePhoto=Delete photo
properties.uderConstruction=Under construction
html.a.title.registration=Registration
html.h1.registration=New User registration
html.a.index.registration=Registration
html.a.index.login=Login
html.input.placeholder.enterYourEmail=Enter your email here
html.input.placeholder.enterYourPassword=Password (minimum 5 symbols)
html.submit.text.registration=Create account!
html.input.placeholder.confirmYourPassword=Confirm new password
html.span.text.selectYourLanguage=Preferred language
properties.details=Details
html.span.text.redAsteriskFields=Asterisk-marked fields are should be filled up
html.a.title.login=Login page
email.mimeMessage.subject.registrationConfirmation=Registration confirmation on Workshop.pro
email.mimeMessage.text.registrationConfirmation(2)=<p>\
\u0412\u044B \u0442\u043E\u043B\u044C\u043A\u043E \u0447\u0442\u043E \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043E\u0432\u0430\u043B\u0438\u0441\u044C \u043D\u0430 \u043D\u0430\u0448\u0435\u043C \u0441\u0430\u0439\u0442\u0435 {0}.</p>\
<p>\
\u0414\u043B\u044F \u043F\u043E\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043D\u0438\u044F \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043F\u0440\u043E\u0439\u0434\u0438\u0442\u0435, \u043F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043F\u043E \u0441\u044B\u044B\u043B\u043A\u0435: {1}, \u043F\u043E\u0441\u043B\u0435 \u0447\u0435\u0433\u043E \u0432\u0430\u043C \u0431\u0443\u0434\u0443\u0442 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B \u0434\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0435 \u043E\u043F\u0446\u0438\u0438.\
</p>\
<p>\
\u0415\u0441\u043B\u0438 \u044D\u0442\u043E \u0431\u044B\u043B\u0438 \u043D\u0435 \u0432\u044B, \u043F\u0440\u043E\u0441\u0442\u043E \u0443\u0434\u0430\u043B\u0438\u0442\u0435 \u044D\u0442\u043E \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435.\
</p>\
<p>\
<i>\
\u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043D\u0435 \u043E\u0442\u0432\u0435\u0447\u0430\u0439\u0442\u0435 \u043D\u0430 \u044D\u0442\u043E \u043F\u0438\u0441\u044C\u043C\u043E, \u043E\u043D\u043E \u043D\u043E\u0441\u0438\u0442 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0442\u0438\u0432\u043D\u044B\u0439 \u0445\u0430\u0440\u0430\u043A\u0442\u0435\u0440.\
</i>\
</p>
html.a.text.repeatedActivationLink=To get a repeated account activation link.
html.article.registration.repeatedAccountActivationLinkRequest=Enter the login (email) you used while registering for the first time. We will send the repeated account activation link onto this email.
html.article.registration.repeatedAccountActivationLinkRequestDemo=<p>\
Enter the login (email) you used while registering for the first time. We will send the repeated account activation link onto this email.\
</p>\
<p>\
Input fields are interactive. While input you will be informed if an email exist and if it possible to obtain an activation link for non-active profile.\
</p>
html.submit.text.reactivation=Get the link
html.a.title.repeatedAccountActivation=If you had been registered but haven't received the activation link yet.
html.input.placeholder.enterRegistrationEmail=Email for activation
html.submit.text.resetPassword=Reset password
html.button.title.resetPasswordProcessDescription=Request the reset password procedure
html.a.title.passwordReset=Reset password page
html.submit.title.passwordResetDescription=Get the password reset link by email
html.input.placeholder.enterNewPassword=Enter new password
html.article.resetPasswordLoggedUsersDemo=This page is different for logged and not logged Users. The first ones observes a bit simplified password reset form, the second ones observes an email input form to receive a special kind of secure link for password reset purpose.
