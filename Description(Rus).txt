ГЛАВНАЯ СТРАНИЦА

Вас приветствует условно-теоретическая интернациональная компания Workshop на своей главной странице.
Теоретически, мы предлагаем любой спектр услуг. Сейчас мы предлагаем вам ТО, ремонт и любое обслуживание вашего велосипеда.
Если вы лично посетили наш офис, менеджер оформит для вас заказ и выдаст вам его номер, а на сайте, без регистрации, вы можете отследить его степень готовности.
Если вы зарегистрируетесь, то сможете сами создавать заказы, выбирая из прайса нужные предустановленные услуги, чтобы привезти к нам велосипед позже.

Языков поддерживается два - Русский и Английский (мы жеж интернациональная компания!). Язык страниц подхватывается автоматически из заголовка браузера "Accept-Language", после смены записывается в куку и вообще все становится на другом языке.

Весь проект делится на два домена - внешний (External) и внутренний (Internal). У Внутреннего пока реализован только бэкенд, а Внешний в проекте.

При запуске приложения автоматически запускается сервер с базой данных в памяти, куда заносятся тестовые
предустановленные данные (Пользователи, Сотрудники, Заказы и т.п.). После выключения все данные пропадают.

=============================

Левое меню:
- Главная страница Workshop
	(title="Страница для пользователей.")
- Вход для сотрудников
	(title="Основная рабочая площадка для персонала")

==============================

Верхнее горизонтальное меню:
-Цель проекта (Вкратце всплывающим текстом, но ведет на отдельную страницу)
	Попробовал представить, как могла бы работать отдельная мастерская, к примеру, велосипедная, - мелкая или средняя, - принимающая заказы по прайсу на свои отдельные работы, где набор из таких работ объединяется в заказ, а номер заказа высылается клиенту на номер телефона или почту. Далее на сайте по номеру заказа клиенты могут отследить степень выполнения.
	Чтобы не делать монолитное приложение, оно создано в виде отельных модулей, каждый из которых отвечает за свою задачу.
	А вся внутренняя часть общается с веб-интерфейсом через REST.
-Технологии проекта (Подсписком отдельных меню, на каждое всплывает свой описание, нажатие ведет на отдельную страницу).
	Spring Boot, Spring MVC, Spring Security, JPA(Hibernate) (Указать, что с SQL, JPQL, CriteriaAPI), Spring HATEOAS (REST), Thymeleaf, HTML/CSS (Указать, почему в чистом виде без доп. инструментов)
-Подробности проекта. (title="Как это работает вкратце")
	--Как это работает.
		1. Classifiers: Мактерская содержит набор классификаторов - фиксированных услуг со своей ценой. Если желаемой для клиента услуги нет - ее можно создать на ходу, вписать цену (или бесплатно) и вложить в Задачу.
		2. Tasks: Отдельные задачи для выполнения. Например, "Сделать ТО передней вилке велосипеда". В задачу может входить несколько Классификаторов со своей ценой, так как вилка может дополнительно требовать "Ремонт регулятора отскока" и "Замена масла в демпфере отскока на другой тип". Такие задачи могут назначаться на разных исполнителей, которые и закрывают их по мере выполненияо.
		3. Orders: Суммирующие заказы, агрегирующие в себя все Задачи, все Классификаторы и сумму их цен, данные клиента, дату создания, предположительную дату выполнения и т.п. С выполнением последней Задачи Заказ сигнализирует о своем выполнении клиенту по почте или телефону (!!!!!!!! реализовать!!!!!).
	--Authentication security
	    -Тут JWT flow with schema
	--Authorization security.
		- Каждая сущность приложения имеет свой тип (WorkshopEntityType) просто по своему названию: Order, Task, User etc.
		- Базовые разрешения (AuthorityPermissions) для доступа к каждой сущности приложения основаны на Http-протоколах: GET (Read), PUT (Write), POST (Create), DELETE (Delete). Каждое созданное разрешение включает тип доступа и набор сущностей для данного типа. Например, AuthorityPermittion "PUT (Order, Classifier)" позволяет вносить правки в Заказы и Классификаторы.
		- Набор таких разрешений группируется в отдельные Разрешения (InternalAuthorities для сотрудников и ExternalAuthorities для пользователей). Например, InternalAuthority "HR_WRITE" будет включать в себя предварительно созданное разрешение "PUT (Order, Classifier)" и "GET (Order, Classifier, User, Task)", что поволит ему вностить правки в Заказы и Классификаторы, а также просто читать данные отдельных Задач и Пользователей.
		- Ну и набор таких InternalAuthorities раздается для каждой должности (Position) сотрудников. А набор ExternalAuthorities для каждого Пользователя.
-Что еще не реализовано
	1. Поскольку проект разработан как REST-сервис, то основная клиентская часть должна быть выполнена в виде одностраничного приложения на React, принимающего JSON в виде сущностей в обертке HATEOAS с набором ссылок для управления ими и вложенными сущностями, а это требует отдельной разработки на JavaScript.
	2. Заказы могут приниматься от клиентов прямо менеджером, когда номер заказа и степень его готовности высылаются клиенту по телефону - вот телефонный сервис и есть отдельная нереализованная задача.
-Пожаловаться на дизайн и верстку
	Рисовать не умею и не буду. Дизайн могу только бесхитростный. Верстка, стили, обрезание пикселей - это муторно, долго и не ахти как интересно. Жалоба принята )))
-О нас (мне) (Тут о себе что-нибудь приемлемое написать. В том числе идею создания.)
 
=======================================

СТРАНИЦА ЛОГИНА

Это страница входа во внутренний раздел для сотрудников.

Логин - это почта, а пароли у всех, для упрощения, "12345". Список предустановленных сотрудников вы можете видеть в таблице.

У каждого сотрудника своя должность и каждая должность имеет свои права доступа. В соответствии с должностью, открываются дополнительные меню для управлениями разными аспектами (Отделу кадов - управление персоналом, Менеждеру - управление заказами, Технику - управление задачами и просмотр своего профиля и т.п.).

Самый полный доступ ко всем разделам со всеми разрешениями имеет пользователь "admin@workshop.pro" со стандартным паролем "12345".



 
Это вторая колонка. Тут таблица.

User 1	User 1
User 2	User 1
admin@workshop.pro

