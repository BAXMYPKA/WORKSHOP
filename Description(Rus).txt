//TODO:
1. Send email after Order is ready
2. Docs as the separate thing with link in README
3. Json views based on authorities permissions
4. Pictures loading and retrieving
5. HTTP-port through workshop.properties

Readme.md
Как минимум он должен содержать общее описание по следующим пунктам:

Назначение библиотеки (проекта, инструмента, фреймворка)
Системные требования (версия языка, требования к ресурсам, системные зависимости, нужные расширения)
Шаги по установке, сборке, запуску
Примеры использования или ссылки на документацию

/////////////////////////////////////////////////////////////////

ГЛАВНАЯ СТРАНИЦА

RUS
<p>Вас приветствует условно-теоретическая интернациональная компания Workshop на своей главной странице.</p>
<p>Теоретически, мы предлагаем любой спектр услуг. Сейчас мы предлагаем вам ТО, ремонт и любое обслуживание вашего велосипеда.
<br>
Если вы лично посетили наш офис, менеджер оформит для вас заказ и выдаст вам его номер, а на сайте, без регистрации, вы можете отследить его степень готовности.
<br>
Если вы зарегистрируетесь, то сможете сами создавать заказы, выбирая из прайса нужные предустановленные услуги, чтобы
привезти к нам велосипед позже.</p>

<p>Языков поддерживается два - Русский и Английский (мы жеж интернациональная компания!). Язык страниц подхватывается автоматически из заголовка браузера "Accept-Language", после смены записывается в куку и вообще все становится иноязычным. Английский по-умолчанию.</p>

<p>Весь проект делится на два домена - внешний (External) для пользователей и внутренний (Internal) для сотрудников. У Внутреннего пока реализован только бэкенд, а Внешний в проекте.</p>

<p>При запуске приложения автоматически запускается сервер с базой данных в памяти, куда заносятся тестовые предустановленные данные (Пользователи, Сотрудники, Заказы и т.п.). После выключения все данные пропадают.</p>

=============================

Левое меню:
- Главная страница Workshop
	(title="Страница для пользователей.")
- Вход для сотрудников
	(title="Основная рабочая площадка для персонала")

==============================

Верхнее горизонтальное меню:

-Цель проекта
	<p>Попробовал представить, как могла бы работать отдельная мастерская, к примеру, велосипедная, - мелкая или средняя, - принимающая заказы по прайсу на свои отдельные работы, где набор из таких работ объединяется в заказ, а	номер заказа высылается клиенту на номер телефона или почту. Далее на сайте по номеру заказа клиенты могут отследить степень выполнения.</p>
	<p>Чтобы не делать монолитное приложение, оно создано в виде отельных Maven-модулей, каждый из которых отвечает за свою задачу.
	<br>
	А вся внутренняя часть общается с веб-интерфейсом через REST.</p>
	<p>Итого, простая и очевидная цель: пощупать все это руками и мозгом.</p>

-Технологии проекта (Подсписком отдельных меню, на каждое всплывает свой описание, нажатие ведет на отдельную страницу).
	-Spring Boot
	-Spring MVC / Thymeleaf / HTML/CSS
	-Spring Security / JWT
	-Spring HATEOAS (REST)
	-JPA(Hibernate)
	-SQL (H2 database)
	-Hibernate Validation, Jackson JSON, Lombok ...
	-JUnit / Mockito

	    <ul>
	        <li>
	        <p><b>Spring Boot</b></p>
	        Упрощенный старт, т.к. весь адский зоопарк технологий с зависимостями и настройками по-умолчанию подтягивается автоматически. Просто прописываем нужный стартер и там включено почти все необходимое.
	        <br>
	        Пллюс встроенный сервер Tomcat, стартующий вместе с приложением.
	        </li>
	        <li>
	        <p><b>Spring MVC / Thymeleaf / HTML/CSS</b></p>
	        	<ul>
	        		<li>Spring MVC</li>
	        		Часть приложения работает в обычном режиме web-страниц с обычными контроллерами.
    			     <li>Thymeleaf</li>
                     Прекрасный шаблонизатор HTML-страниц, намного лучше и эффективнее заменяющий устаревший JSP.
	        		<li>HTML/CSS</li>
	        		Тут никаких пост-процессоров, попиксельно выверенной верстки, правильного дизайна и прочих правильных причуд для верстальщиков.
	        	</ul>
	        </li>
	        <li>
	        <p><b>Spring Security / JWT</b></p>
	        	<ul>
	        		<li>
	        		<p>Spring Security</p>
					Доступ к непубличной части проложения ограничивается каскадом фильтров, встроенных в данный фреймворк.
					<br>
					Для REST-части - это проверка каждого обращения, для MVC-части - запись в сессию.
					<br>
					На основе выдаваемых GrantedAuthorities при авторизации раздается доступ к методам и возможностям приложения.
					<br>
					Более подробно весь флоу расписан в разделе "Авторизация".
	        		</li>
	        		<li>
	        		<p>JWT</p>
	        		JSON Web Token технология для самовыписанных приложением ключей, на основе которых и производится аутентификация пользователей.
	        		<br>
	        		Более подробно про процесс написано в разделе "Аутентификация"
	        		</li>
	        	</ul>
	         </li>
	         <li>
	         <p><b>Spring HATEOAS (REST)</b></p>
	         Обращение к внутренним сущностям домена основано на REST-технологиях с помощью http-протоколов "get"-чтение, "post"-запись нового, "put"-изменение и "delete"-удаление.
	         <p>
	         Реализация Hypermedia As The Engine Of Application State с каждой сущностью возвращает набор ссылок на управление как ею самой (например, ссылка, по которой можно ее удалить), так и ссылки на просмотр и упраление вложенными объектами.
	         <br>
	         Видимость тех или иных объектов для управления зависит от прав доступа текущего пользователя.
	         </p>
	         </li>
	         <li>
	         <p><b>JPA (Hibernate)</b></p>
	         Hibernate использован как непосредственная реализация объектно-ориентированного доступа к SQL-таблицам.
	         <br>
	         На его нативных возможностях реализовано кэширование второго уровня. Для всего остального использованы вызовы стандартного интерфейса JPA.
	         <p>Язык запросов CriteriaAPI идет вперемешку с JPQL для практики.</p>
	         <p><i>Честно говоря, в источниках пока еще много тупых вызовов сущностей целиком для их изменения, что простительно для маленького приложения. Но для оптимизации все это должно заменяться на непосредственные запипи в таблицы с помощью JPQL.</i>
	         </p>
	         </li>
	         <li>
	         <p><b>SQL (H2 database)</b></p>
	         В качестве базы данных SQL использована H2, потому что она работает как ява-приложение, прекрасно совместимо со многими SQL-диалектами и может работать как встроенная база - стартует вместе с приложением, записывает все в память, и выключается вместе с приложением.
	         </li>
	         <li>
	         <p><b>Hibernate Validation, Jackson JSON, Lombok, Ehcache</b></p>
	         Всякие дополнительные библиотеки.
	         </li>
	         <li>
	         <p><b>Тестирование: JUnit и Mockito</b></p>
	         Юнит-тестирование и интеграционное тестирование. Последнее намного чаще, т.к. в маленьком приложении иногда удобнее сразу тестировать сквозной функционал, чем городить кучу моков.
	         </li>
	    </ul>

-Подробности проекта. (title="Как это работает вкратце")
	--Как это работает.
	    <ol>
            <li>Classifiers:</li>
            <p>Мастерская содержит набор классификаторов - фиксированных услуг со своей ценой. Если желаемой для клиента услуги нет - ее можно создать на ходу, вписать цену (или бесплатно) и вложить в Задачу.
            </p>
            <li>Tasks:</li>
            <p>Отдельные задачи для выполнения. Например, "Сделать ТО передней вилке велосипеда". В задачу может входить несколько Классификаторов со своей ценой, так как вилка может дополнительно требовать "Ремонт регулятора отскока" и "Замена масла в демпфере отскока на другой тип". Такие задачи могут назначаться на разных исполнителей, которые и закрывают их по мере выполнения.
            </p>
            <li>Orders:</li>
            <p>Суммирующие заказы, агрегирующие в себя все Задачи, все Классификаторы и сумму их цен, данные клиента, дату создания, предположительную дату выполнения и т.п. С выполнением последней Задачи Заказ сигнализирует о своем выполнении клиенту по почте или телефону.
            </p>
		</ol>
	--Authentication security
	    -Тут JWT flow with schema
	--Authorization security.
	    <ul>
            <li>Каждая сущность приложения имеет свой тип (WorkshopEntityType) просто по своему названию: Order, Task, User etc.
            </li>
            <li>Базовые разрешения (AuthorityPermissions) для доступа к каждой сущности приложения основаны на Http-протоколах: GET (Read), PUT (Write), POST (Create), DELETE (Delete).
            <br>
            Каждое созданное разрешение включает тип доступа и набор сущностей для данного типа. Например, AuthorityPermission "PUT (Order, Classifier)" позволяет вносить правки в Заказы и Классификаторы.
            </li>
            <li>Набор таких разрешений группируется в отдельные Разрешения (InternalAuthorities для сотрудников и ExternalAuthorities для пользователей). Например, InternalAuthority "HR_WRITE" будет включать в себя предварительно созданное разрешение "PUT (Order, Classifier)" и "GET (Order, Classifier, User, Task)", что поволит ему вностить правки в Заказы и Классификаторы, а также просто читать данные отдельных Задач и Пользователей.
            </li>
            <li>Ну и набор таких InternalAuthorities раздается для каждой должности (Position) сотрудников, в соответствии с каковым набором сотрудники разных должностей видят или не видят те или иные сущности.
            <br>
            ExternalAuthorities же раздаются подобными наборами для каждого внешнего Пользователя.
            </li>
		</ul>
-Что еще не реализовано
    <ul>
        <li>
        Поскольку проект разработан как REST-сервис, то основная клиентская часть должна быть выполнена в виде одностраничного приложения на React, принимающего JSON в виде сущностей в обертке HATEOAS с набором ссылок для управления ими и вложенными сущностями, а это требует отдельной разработки на JavaScript.
        </li>
        <li>Заказы могут приниматься от клиентов прямо менеджером, когда номер заказа и степень его готовности высылаются клиенту по телефону - вот телефонный сервис и есть отдельная нереализованная задача.
        </li>
	</ul>
-Пожаловаться на дизайн и верстку
	<p>Рисовать не умею и не буду. Дизайн у меня довольно бесхитростный.
	<br>
	Верстка, стили, обрезание пикселей - это муторно, долго и не ахти как интересно.
	 <br>
	 Пока в проекте только обычный HTML + загрузка CSS стилей для каждой страницы.
	 <br>
	 <p>Жалоба принята )))</P
	 </p>
-О нас (мне)
    (Тут о себе что-нибудь приемлемое написать. В том числе идею создания.)
 
=======================================

СТРАНИЦА ЛОГИНА

Это страница входа во внутренний раздел для сотрудников.

Логин - это почта, а пароли у всех, для упрощения, "12345". Список предустановленных сотрудников вы можете видеть в таблице.

У каждого сотрудника своя должность и каждая должность имеет свои права доступа. В соответствии с должностью, открываются дополнительные меню для управлениями разными аспектами (Отделу кадов - управление персоналом, Менеждеру - управление заказами, Технику - управление задачами и просмотр своего профиля и т.п.).

Самый полный доступ ко всем разделам со всеми разрешениями имеет пользователь "admin@workshop.pro" со стандартным паролем "12345".



 
Это вторая колонка. Тут таблица.

User 1	User 1
User 2	User 1
admin@workshop.pro

