ГЛАВНАЯ СТРАНИЦА

RUS
<p>Вас приветствует условно-теоретическая интернациональная компания Workshop на своей главной странице.</p>
<p>Теоретически, мы предлагаем любой спектр услуг. Сейчас мы предлагаем вам ТО, ремонт и любое обслуживание вашего
велосипеда.
Если вы лично посетили наш офис, менеджер оформит для вас заказ и выдаст вам его номер, а на сайте, без регистрации, вы можете отследить его степень готовности.
Если вы зарегистрируетесь, то сможете сами создавать заказы, выбирая из прайса нужные предустановленные услуги, чтобы
привезти к нам велосипед позже.</p>

<p>Языков поддерживается два - Русский и Английский (мы жеж интернациональная компания!). Язык страниц подхватывается
автоматически из заголовка браузера "Accept-Language", после смены записывается в куку и вообще все становится на другом
 языке. Английский по-умолчанию.</p>

<p>Весь проект делится на два домена - внешний (External) для пользователей и внутренний (Internal) для сотрудников. У
Внутреннего пока реализован
только бэкенд, а Внешний в проекте.</p>

<p>При запуске приложения автоматически запускается сервер с базой данных в памяти, куда заносятся тестовые
предустановленные данные (Пользователи, Сотрудники, Заказы и т.п.). После выключения все данные пропадают.</p>

=============================

Левое меню:
- Главная страница Workshop
	(title="Страница для пользователей.")
- Вход для сотрудников
	(title="Основная рабочая площадка для персонала")

==============================

Верхнее горизонтальное меню:
-Цель проекта (Вкратце всплывающим текстом, но ведет на отдельную страницу)
    RUS
	<p>Попробовал представить, как могла бы работать отдельная мастерская, к примеру, велосипедная, - мелкая или
	средняя, - принимающая заказы по прайсу на свои отдельные работы, где набор из таких работ объединяется в заказ, а
	номер заказа высылается клиенту на номер телефона или почту. Далее на сайте по номеру заказа клиенты могут отследить
	 степень выполнения.</p>
	<p>Чтобы не делать монолитное приложение, оно создано в виде отельных Maven-модулей, каждый из которых отвечает за
	свою задачу.
	<br>
	А вся внутренняя часть общается с веб-интерфейсом через REST.</p>
	<p>Итого, простая и очевидная цель: пощупать все это руками и мозгом.</p>
	ENG
	<p></p>
-Технологии проекта (Подсписком отдельных меню, на каждое всплывает свой описание, нажатие ведет на отдельную страницу).
	-Spring Boot
	-Spring MVC / Thymeleaf / HTML/CSS
	-Spring Security
	-Spring HATEOAS (REST)
	-JPA(Hibernate)
	-SQL (H2 database)
-Подробности проекта. (title="Как это работает вкратце")
	--Как это работает.
	    <ol>
            <li>Classifiers:</li>
            <p>Мактерская содержит набор классификаторов - фиксированных услуг со своей ценой. Если желаемой для клиента
            услуги нет - ее можно создать на ходу, вписать цену (или бесплатно) и вложить в Задачу.
            </p>
            <li>Tasks:</li>
            <p>Отдельные задачи для выполнения. Например, "Сделать ТО передней вилке велосипеда". В задачу
            может входить несколько Классификаторов со своей ценой, так как вилка может дополнительно требовать "Ремонт
            регулятора отскока" и "Замена масла в демпфере отскока на другой тип". Такие задачи могут назначаться на разных
            исполнителей, которые и закрывают их по мере выполненияо.
            </p>
            <li>Orders:</li>
            <p>Суммирующие заказы, агрегирующие в себя все Задачи, все Классификаторы и сумму их цен, данные
            клиента, дату создания, предположительную дату выполнения и т.п. С выполнением последней Задачи Заказ
            сигнализирует о своем выполнении клиенту по почте или телефону.
            </p>
		</ol>
	--Authentication security
	    -Тут JWT flow with schema
	--Authorization security.
	    <ul>
            <li>Каждая сущность приложения имеет свой тип (WorkshopEntityType) просто по своему названию: Order, Task, User etc.
            </li>
            <li>Базовые разрешения (AuthorityPermissions) для доступа к каждой сущности приложения основаны на
             Http-протоколах: GET (Read), PUT (Write), POST (Create), DELETE (Delete). Каждое созданное разрешение
             включает тип доступа и набор сущностей для данного типа. Например, AuthorityPermission "PUT (Order,
             Classifier)" позволяет вносить правки в Заказы и Классификаторы.
            </li>
            <li>Набор таких разрешений группируется в отдельные Разрешения (InternalAuthorities для сотрудников и
            ExternalAuthorities для пользователей). Например, InternalAuthority "HR_WRITE" будет включать в себя
            предварительно созданное разрешение "PUT (Order, Classifier)" и "GET (Order, Classifier, User, Task)", что
            поволит ему вностить правки в Заказы и Классификаторы, а также просто читать данные отдельных Задач и
            Пользователей.
            </li>
            <li>Ну и набор таких InternalAuthorities раздается для каждой должности (Position) сотрудников, в
            соответствии с каковым набором сотрудники разных должностей видят или не видят те или иные сущности.
            <br>
            ExternalAuthorities же раздаются подобными наборами для каждого внешнего Пользователя.
            </li>
		</ul>
-Что еще не реализовано
    <ul>
        <li>
        Поскольку проект разработан как REST-сервис, то основная клиентская часть должна быть выполнена в виде
        одностраничного приложения на React, принимающего JSON в виде сущностей в обертке HATEOAS с набором ссылок для
        управления ими и вложенными сущностями, а это требует отдельной разработки на JavaScript.
        </li>
        <li>Заказы могут приниматься от клиентов прямо менеджером, когда номер заказа и степень его готовности высылаются
        клиенту по телефону - вот телефонный сервис и есть отдельная нереализованная задача.
        </li>
	</ul>
-Пожаловаться на дизайн и верстку
	<p>Рисовать не умею и не буду. Дизайн могу только бесхитростный. Верстка, стили, обрезание пикселей - это муторно,
	долго и не ахти как интересно.
	 <br>
	 Пока только обычный HTML + загрузка CSS стилей для каждой страницы.
	 <br>
	 Жалоба принята )))
	 </p>
-О нас (мне)
    (Тут о себе что-нибудь приемлемое написать. В том числе идею создания.)
 
=======================================

СТРАНИЦА ЛОГИНА

Это страница входа во внутренний раздел для сотрудников.

Логин - это почта, а пароли у всех, для упрощения, "12345". Список предустановленных сотрудников вы можете видеть в таблице.

У каждого сотрудника своя должность и каждая должность имеет свои права доступа. В соответствии с должностью, открываются дополнительные меню для управлениями разными аспектами (Отделу кадов - управление персоналом, Менеждеру - управление заказами, Технику - управление задачами и просмотр своего профиля и т.п.).

Самый полный доступ ко всем разделам со всеми разрешениями имеет пользователь "admin@workshop.pro" со стандартным паролем "12345".



 
Это вторая колонка. Тут таблица.

User 1	User 1
User 2	User 1
admin@workshop.pro

